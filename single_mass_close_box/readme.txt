func_One_type_prep.m

This script performs a relativistic Monte Carlo simulation of colliding identical particles in a closed box with a single mass species. It models the time evolution of particle energies under two-particle elastic collisions, starting from a uniform initial energy distribution.

üîß Inputs:
	‚Ä¢	m ‚Äî particle rest mass
	‚Ä¢	gb ‚Äî initial bulk velocity in units of c (used to compute initial Lorentz boost)
	‚Ä¢	N ‚Äî number of particles in the simulation
	‚Ä¢	step_inc ‚Äî time step between data samples

‚∏ª

üì§ Outputs:
	‚Ä¢	Enb ‚Äî vector of total energies (rest + kinetic) for all particles at the final simulation time
	‚Ä¢	data ‚Äî structure array of sampled time snapshots with:
	‚Ä¢	kin_energy: mean kinetic energy per particle
	‚Ä¢	bins_Ek, f_sim_Ek: energy histogram and distribution
	‚Ä¢	Teo_Ek: Maxwell‚ÄìJ√ºttner distribution for comparison
	‚Ä¢	bins_mu, f_sim_mu: distribution of particle momentum (Œº)
	‚Ä¢	Teo_mu: theoretical prediction for Œº
	‚Ä¢	coll_num: cumulative number of accepted collisions
	‚Ä¢	time: time of snapshot
	‚Ä¢	icb ‚Äî struct with simulation parameters (mass, energy, bin edges)

‚öôÔ∏è Core Features:
	‚Ä¢	Initializes particles with the same total energy derived from a Lorentz-boosted rest energy
	‚Ä¢	Computes theoretical temperature T by solving a transcendental equation involving Bessel functions
	‚Ä¢	Uses random isotropic directions for momentum sampling (randdir_matrix)
	‚Ä¢	Evolves the system via stochastic binary collisions using the RelCol function
	‚Ä¢	Uses an adaptive time loop with a probabilistic collision acceptance step
	‚Ä¢	Samples kinetic energy and momentum (Œº) distributions at regular intervals
	‚Ä¢	Compares simulation histograms with the Maxwell‚ÄìJ√ºttner theoretical distribution

üì¶ Output:
	‚Ä¢	Simulation results are saved in a .mat file in the saves/ directory, with a filename summarizing parameters

‚∏ª

% Example Usage in MATLAB

% Set rest mass of particles
m = 1;

% Set initial scaled momentum (dimensionless, v/c)
gb = 0.1;

% Convert to Lorentz boost factor (gamma)
b = sqrt(gb^2 / (1 + gb^2));
g = 1 / sqrt(1 - b^2);

% Calculate initial energy per particle (total and kinetic)
e = m * g;
ke = e - m;  % kinetic energy

% Number of particles
N = 1e6;

% Time step interval for data collection
step_inc = 1e-3;

% Run the simulation
[Enb, data, icb] = func_One_type_prep(m, gb, N, step_inc);
